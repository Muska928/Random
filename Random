import pandas as pd
import re
from transformers import AutoModelForSequenceClassification, AutoTokenizer, pipeline
from tqdm import tqdm

# Load data from Salesforce analytics
df_salesforce = pd.read_excel('/mnt/data/Salesforce_Deals_Text_Analytics.xlsx')

# Concatenate text columns into a single string variable
df_salesforce['combined_text'] = df_salesforce[
    ['record_comment_text', 'description_text', 'executive_summary_text', 'win_loss_reason_text', 'win_loss_comments_text']
].apply(lambda x: ' '.join(x.dropna()), axis=1)

# Preprocess the text
def preprocess_text(text):
    text = text.lower()  # Convert text to lowercase
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove special characters and numbers
    text = re.sub(r'\s+', ' ', text).strip()  # Remove extra whitespace
    return text

# Apply preprocessing
df_salesforce['combined_text'] = df_salesforce['combined_text'].apply(preprocess_text)

# Load Mistral model and tokenizer from the specified folder
model_path = "./mistral"
tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModelForSequenceClassification.from_pretrained(model_path)

# Sentiment analysis pipeline with return_all_scores=True
sentiment_pipeline = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer, return_all_scores=True)

# One-shot prompt template
one_shot_template = """
Text: "{text}"
Sentiment:
Trigger:
LOB:
"""

# Apply the sentiment and trigger analysis using one-shot prompting
print("Applying one-shot prompting...")
sentiments = []
triggers = []
probabilities = []
lobs = []

for text in tqdm(df_salesforce['combined_text']):
    prompt = one_shot_template.format(text=text)
    response = sentiment_pipeline(prompt)[0]

    generated_text = response['generated_text']

    sentiment_label = re.search(r'Sentiment:\s*(POSITIVE|NEGATIVE|CANCELLED)', generated_text)
    trigger_text = re.search(r'Trigger:\s*(.*)', generated_text)
    lob_text = re.search(r'LOB:\s*(.*)', generated_text)

    # Ensure that sentiment_label, trigger_text, and lob_text are found
    if sentiment_label and trigger_text and lob_text:
        sentiment_label = sentiment_label.group(1)
        trigger_text = trigger_text.group(1)
        lob_text = lob_text.group(1)

        # Extract probabilities
        scores = {label['label']: label['score'] for label in response['scores']}
        probability = scores[sentiment_label]

        sentiments.append(sentiment_label)
        triggers.append(trigger_text)
        probabilities.append(probability)
        lobs.append(lob_text)
    else:
        # Handle cases where sentiment, trigger, or LOB extraction fails
        sentiments.append(None)
        triggers.append(None)
        probabilities.append(None)
        lobs.append(None)

df_salesforce['sentiment'] = sentiments
df_salesforce['trigger'] = triggers
df_salesforce['probability'] = probabilities
df_salesforce['lob'] = lobs

# Save the output to a CSV file
output_file_path = '/mnt/data/Salesforce_Deals_Sentiment_Analysis_Output.csv'
df_salesforce.to_csv(output_file_path, index=False)

# Print a sample of the output in tabular form
print(df_salesforce[['combined_text', 'sentiment', 'trigger', 'probability', 'lob']].head().to_markdown())
