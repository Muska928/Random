import pandas as pd
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
from tqdm import tqdm

# Load data
df = pd.read_excel('Data/closed_won_final.csv')  # Ensure this path is correct
df = df.head(10)  # Limiting to only 10 rows for demonstration
total_rows = len(df)

# Load model and tokenizer
model_path = "mistral/Mistral-7B-Instruct-v0.2"
tokenizer = AutoTokenizer.from_pretrained(
    model_path,
    trust_remote_code=True,
    padding_side="left",
    use_fast=True,
    add_bos_token=True,
    add_eos_token=True
)

tokenizer.pad_token = tokenizer.eos_token

# Model loading
model = AutoModelForCausalLM.from_pretrained(
    model_path,
    trust_remote_code=True,
    device_map="auto"
)

# Set up text generation pipeline
generation_pipeline = pipeline('text-generation', model=model, tokenizer=tokenizer)

# Dictionary to store assignments for reuse and track repetition
assignment_memory = {}

def classify_texts(df_batch):
    assigned_categories = []
    specific_processes = []
    account_opening_flags = []
    repetition_labels = []
    confidence_scores = []

    # Define the updated prompt template for classification and location-specific context with confidence
    updated_prompt_template = """
    You are an AI tasked with reading a text related to financial and business processes. First, determine if this case is related to **Account Opening**.
    
    - If yes, keep the assigned category as **Account Opening** and include any specific location mentioned (e.g., "Account Opening in Dubai").
    - If no, based on your understanding of the text, assign a suitable category that reflects the context of the case and any relevant location (e.g., "Personnel Change in London").

    After categorizing the text, you must also describe the specific process in 2-3 words that is happening in the text. Additionally, include a confidence score (0-100%) indicating how certain you are of the assigned category.

    Text: "{input_text}"

    ### Response Format:
    1. Category: [Assigned Category with Location (if applicable)]
    2. Specific Process: [2-3 word process description]
    3. Confidence: [Confidence level (0-100%)]
    """

    batch_texts = df_batch["combined_text"].tolist()

    for text in batch_texts:
        # Check if the text has been previously classified
        if text in assignment_memory:
            assigned_category, specific_process, confidence = assignment_memory[text]
            assigned_categories.append(assigned_category)
            specific_processes.append(specific_process)
            confidence_scores.append(confidence)
            account_opening_flags.append("Yes" if "Account Opening" in assigned_category else "No")
            repetition_labels.append("Repetitive")
        else:
            # Create prompt and generate response
            prompt = updated_prompt_template.format(input_text=text)
            response = generation_pipeline(prompt, max_new_tokens=200, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)
            
            # Extract the generated text
            generated_text = response[0]['generated_text'] if response else "No valid response"
            
            # Extract the category, specific process, and confidence score
            category, process, confidence = extract_category_process_confidence(generated_text)
            
            assigned_categories.append(category)
            specific_processes.append(process)
            confidence_scores.append(confidence)
            repetition_labels.append("Unique")
            
            # Store the result for future reuse
            assignment_memory[text] = (category, process, confidence)
            
            # Set the "Account Opening" flag
            account_opening_flags.append("Yes" if "Account Opening" in category else "No")
    
    # Add the classification results, repetition label, confidence score, and flags to the DataFrame
    df_batch['assigned_category'] = assigned_categories
    df_batch['specific_process'] = specific_processes
    df_batch['confidence_score'] = confidence_scores
    df_batch['is_related_to_account_opening'] = account_opening_flags
    df_batch['repetition_label'] = repetition_labels
    
    return df_batch

# Extract the category, specific process, and confidence score from the generated text
def extract_category_process_confidence(text):
    # Split the text into lines
    lines = text.split("\n")
    category = "Not available"
    process = "Not available"
    confidence = "Not available"

    # Loop through the lines to find the category, process, and confidence
    for line in lines:
        line = line.strip()
        if line.startswith("1. Category:"):
            # Extract the category after "1. Category:"
            category = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
        elif line.startswith("2. Specific Process:"):
            # Extract the specific process after "2. Specific Process:"
            process = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
        elif line.startswith("3. Confidence:"):
            # Extract the confidence score after "3. Confidence:"
            confidence = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
    
    return category, process, confidence

# Main function to process batches
def process_batches(df, batch_size):
    all_results = pd.DataFrame()
    for start in tqdm(range(0, total_rows, batch_size), desc="Processing Batches"):
        end = min(start + batch_size, total_rows)
        
        # Get the batch to process
        df_batch = df.iloc[start:end].copy()
        
        # Run classification task
        df_batch = classify_texts(df_batch)
        
        # Append the classified results to the full dataframe
        all_results = pd.concat([all_results, df_batch], ignore_index=True)

    # Save final combined results to new file after all batches are processed
    all_results.to_csv('final_classification_output_with_confidence.csv', index=False)
    print("Final results saved to final_classification_output_with_confidence.csv.")

# Run the process with batch size
process_batches(df, batch_size=5)

# Check the final DataFrame content
df_final = pd.read_csv('final_classification_output_with_confidence.csv')
print(df_final.head())
