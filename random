import pandas as pd
import pyLDAvis
import pyLDAvis.gensim_models as gensimvis
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import os

# Load Excel file with topic names and percentages
topic_data = pd.read_excel('path_to_your_file.xlsx')  # Update path

# Generate the pyLDAvis visualization
vis_data = gensimvis.prepare(optimal_model, corpus, dictionary)

# Extract topic names and percentages from the Excel file
topic_names = topic_data.set_index('LDA Graph Topic')['Topic_Name'].to_dict()  # Creating a dictionary {topic_number: topic_name}
topic_percentages = topic_data.set_index('LDA Graph Topic')['Percentage'].to_dict()  # Creating a dictionary {topic_number: percentage}

# Filter out only the rows where 'Category' is actually a topic (e.g., 'Topic1', 'Topic2', ..., 'Topic14')
topic_categories = [f"Topic{i+1}" for i in range(optimal_model.num_topics)]  # Generates 'Topic1', 'Topic2', ..., 'Topic14'
topic_proportions = vis_data.topic_info.loc[vis_data.topic_info['Category'].isin(topic_categories), ['Category', 'Freq']]

# Normalize the frequencies to get percentages (in case they don't match with your Excel file percentages)
total_freq = topic_proportions['Freq'].sum()
topic_proportions['Freq'] = (topic_proportions['Freq'] / total_freq) * 100  # Convert to percentage

# Remove duplicates if any exist
topic_proportions = topic_proportions.drop_duplicates(subset=['Category'])

# Sort topics by their proportions
sorted_topics = topic_proportions.sort_values(by='Freq', ascending=False)

# Function to create WordCloud for each topic
def generate_wordclouds(optimal_model):
    wordcloud_dir = 'wordclouds'
    os.makedirs(wordcloud_dir, exist_ok=True)
    
    for topic_num in range(optimal_model.num_topics):
        wordcloud = WordCloud(width=800, height=400).generate_from_frequencies(dict(optimal_model.show_topic(topic_num, 20)))
        wordcloud_file = f"{wordcloud_dir}/wordcloud_topic_{topic_num}.png"
        wordcloud.to_file(wordcloud_file)
        print(f"Wordcloud for Topic {topic_num} saved at: {wordcloud_file}")

# Function to show top documents for each topic
def get_top_documents(optimal_model, docs, num_docs=5):
    topic_distributions = [optimal_model.get_document_topics(bow) for bow in corpus]
    for topic_num in range(optimal_model.num_topics):
        top_docs = [doc for doc, topic_dist in zip(docs, topic_distributions) if topic_dist[topic_num][1] > 0.9]
        print(f"Top {num_docs} documents for Topic {topic_num}: {top_docs[:num_docs]}")

# Create HTML for PyLDAvis output with custom title and description
with open('lda_visualization_with_title.html', 'w') as f:
    f.write("<html><head><title>LDA Topic Model Visualization</title></head><body>")
    f.write("<h1>LDA Topic Model Visualization</h1>")
    f.write("<p>This dashboard displays the key topics identified through Latent Dirichlet Allocation (LDA) topic modeling. The size of the bubbles represents the proportion of each topic, and the bar chart shows the most relevant terms for the selected topic.</p>")
    f.write("<h2>Normalized Topic Proportions and Top Words (Matching PyLDAvis)</h2>")
    
    # Extracting the top words for each topic from PyLDAvis data and adding topic names from your Excel
    for idx, row in sorted_topics.iterrows():
        topic_id = int(row['Category'].replace("Topic", ""))  # Extract topic number
        # Extract the top 10 words for this topic from the PyLDAvis term data
        top_words_df = vis_data.token_table[vis_data.token_table['Topic'] == topic_id]
        top_words = top_words_df.sort_values(by='Freq', ascending=False)['Term'].head(10).tolist()
        top_words_str = ', '.join(top_words)  # Convert to a string
        topic_name = topic_names.get(topic_id, f"Topic {topic_id}")  # Get the topic name from Excel or use default if not found
        topic_percentage = topic_percentages.get(topic_id, row['Freq'])  # Use percentage from Excel if available
        f.write(f"<p>{topic_name} ({topic_percentage:.2f}%): {top_words_str}</p>")

    # Generate and include word clouds in the HTML
    f.write("<h2>Word Clouds for Topics</h2>")
    for topic_num in range(optimal_model.num_topics):
        f.write(f'<img src="wordclouds/wordcloud_topic_{topic_num}.png" alt="Wordcloud for Topic {topic_num}"><br>')
    
    # Save PyLDAvis content to HTML file
    pyLDAvis.save_html(vis_data, f)
    f.write("</body></html>")

# Generate WordClouds for each topic
generate_wordclouds(optimal_model)

# Get top documents for each topic (You can replace 'docs' with your actual document data)
docs = ["Document 1", "Document 2", "Document 3", ...]  # Example placeholder
get_top_documents(optimal_model, docs, num_docs=3)

# Save the updated PyLDAvis output with topic names as an HTML file
pyLDAvis.save_html(vis_data, 'lda_visualization_with_excel_topics.html')

# Visualize the pyLDAvis output in a Jupyter Notebook or save it as an HTML file
pyLDAvis.display(vis_data)
