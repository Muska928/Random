import pandas as pd
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
from tqdm import tqdm
import torch
from transformers import BitsAndBytesConfig

# Load data from Salesforce analytics (assuming you have 'assigned_topic_name' and 'combined_text' columns)
df_salesforce = pd.read_excel('/mnt/data/Salesforce_Deals_Text_Analytics.xlsx')

# No preprocessing required; assume combined_text column is ready to use

# Process the entire dataset without sampling
df_sample = df_salesforce  # Use the entire DataFrame

# Load Mistral model and tokenizer from the specified folder with device_map='auto'
model_path = "mistral/Mistral-7B-Instruct-v0.2"

tokenizer = AutoTokenizer.from_pretrained(
    model_path,
    trust_remote_code=True,
    padding_side="left",
    use_fast=True,
    add_bos_token=True,
    add_eos_token=True
)

tokenizer.pad_token = tokenizer.eos_token

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

# Ensure proper device mapping and loading
model = AutoModelForCausalLM.from_pretrained(
    model_path,
    quantization_config=bnb_config,
    torch_dtype=torch.bfloat16,
    device_map="auto",
    trust_remote_code=True,
)

model.config.use_cache = False  # silence the warnings
model.config.pretraining_tp = 1
model.gradient_checkpointing_enable()

# Sentiment analysis pipeline with the Mistral instruct model
generation_pipeline = pipeline('text-generation', model=model, tokenizer=tokenizer)

# Define the updated prompt template
updated_prompt_template = """
You are an AI tasked with analyzing a Salesforce deal, determining the reasons for its success or failure, and providing insights in a narrative form. Your goal is to generate a business story that tells the factors leading to the deal's outcome, aligning it with one of the following business categories:

Categories:
1. Strong Client Relationship and Market Engagement: Deals won or lost based on client relationships and market positioning.
2. Effective Pricing and Profitability: Deals where competitive pricing or profitability was a key factor.
3. Operational Excellence and Process Efficiency: Deals influenced by the efficiency of operations or processes.
4. Product and Service Delivery: Deals won or lost due to product offerings or service delivery.
5. Innovative and Tailored Solutions: Deals influenced by innovative, tailored solutions to meet client needs.

Next, provide an analysis of the deal’s outcome (win or loss) and explain the key reasons behind it. If the deal was successful, describe how it was won. If the deal was lost, explain what went wrong and provide suggestions for future improvement.

Finally, summarize the deal's overall outcome in a business narrative, so executives can easily understand what worked or what didn’t.

Given the following text, identify if the assigned topic name aligns with the content, categorize the deal, and provide a win/loss story for business leaders:

Assigned Topic Name: {topic_name}
Text: {input_text}

Provide your response in the following format:
Topic Alignment: [Yes/No]
Category: [Category Name]
Outcome: [Win/Loss]
Business Story: [Detailed story explaining the key reasons for the win/loss]
Improvement Suggestion: [If a loss, explain what can be improved]
"""

# Maximum length of input tokens
max_input_length = 200

# Batch processing size
batch_size = 10

# Generate the output for the entire dataset
results = []
for i in tqdm(range(0, len(df_sample), batch_size), desc="Processing"):
    batch_texts = df_sample['combined_text'].iloc[i:i+batch_size].tolist()
    assigned_topics = df_sample['assigned_topic_name'].iloc[i:i+batch_size].tolist()

    # Combine the assigned topic and text into the prompt
    prompts = [updated_prompt_template.format(topic_name=topic, input_text=text) for topic, text in zip(assigned_topics, batch_texts)]
    
    # Process batches asynchronously
    batch_responses = generation_pipeline(prompts, max_new_tokens=200, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)
    
    # Extract generated text from batch_responses
    for response in batch_responses:
        if isinstance(response, list) and len(response) > 0 and 'generated_text' in response[0]:
            generated_text = response[0]['generated_text']
        elif 'generated_text' in response:
            generated_text = response['generated_text']
        else:
            generated_text = "No valid response"
        results.append(generated_text)

# Combine the results into a single column
df_sample['final_response'] = results

# Extract the topic alignment, category, explanation, outcome, and business story into separate columns
def extract_information(text):
    lines = text.split("\n")
    topic_alignment = "Not available"
    category = "Not available"
    outcome = "Not available"
    business_story = "Not available"
    improvement_suggestion = "Not available"
    
    for line in lines:
        if line.startswith("Topic Alignment:"):
            topic_alignment = line.split(": ")[1]
        elif line.startswith("Category:"):
            category = line.split(": ")[1]
        elif line.startswith("Outcome:"):
            outcome = line.split(": ")[1]
        elif line.startswith("Business Story:"):
            business_story = line.split(": ")[1]
        elif line.startswith("Improvement Suggestion:"):
            improvement_suggestion = line.split(": ")[1]
    
    return topic_alignment, category, outcome, business_story, improvement_suggestion

# Apply the extraction function and create new columns
df_sample[['topic_alignment', 'category', 'outcome', 'business_story', 'improvement_suggestion']] = df_sample['final_response'].apply(lambda x: pd.Series(extract_information(x)))

# Save the results to a CSV file with the new columns
df_sample.to_csv('/mnt/data/Salesforce_Deals_Text_Analytics_Output_Story.csv', index=False)

# Display the DataFrame to verify results
print(df_sample[['topic_alignment', 'category', 'outcome', 'business_story', 'improvement_suggestion']])
