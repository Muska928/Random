import pandas as pd
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
from tqdm import tqdm
import torch
from transformers import BitsAndBytesConfig

# Load Mistral model and tokenizer
model_path = "mistral/Mistral-7B-Instruct-v0.2"

tokenizer = AutoTokenizer.from_pretrained(
    model_path,
    trust_remote_code=True,
    padding_side="left",
    use_fast=True,
    add_bos_token=True,
    add_eos_token=True
)

tokenizer.pad_token = tokenizer.eos_token

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

model = AutoModelForCausalLM.from_pretrained(
    model_path,
    quantization_config=bnb_config,
    torch_dtype=torch.bfloat16,
    device_map="auto",
    trust_remote_code=True,
)

model.config.use_cache = False
model.config.pretraining_tp = 1
model.gradient_checkpointing_enable()

# Initialize the text generation pipeline
generation_pipeline = pipeline('text-generation', model=model, tokenizer=tokenizer)

# Load data from Salesforce analytics
df_salesforce = pd.read_excel('/mnt/data/Salesforce_Deals_Text_Analytics.xlsx')

# Select the first 100 samples for testing
df_sample = df_salesforce.head(100)

# Define the prompt template
prompt_template = """
Analyze the following text and explain why the deal was won. After providing the explanation, categorize the deal into one of the following groups:
1. Strong Client Relationship
2. Effective Pricing
3. Operational Excellence
4. Product and Service Delivery
5. Innovative Solutions

If none of these categories fit, provide a new category that better describes the reason for winning the deal.

Text: {input_text}

Response format:
Explanation: [Provide explanation]
Category: [Choose one of the groups or suggest a new one]
"""

# Define the batch size
batch_size = 10

# Improved function to extract explanation and category from the model response
def extract_explanation_category(text):
    explanation = "Explanation not found"
    category = "Category not found"

    # Normalize the text to ensure consistency
    text = text.strip()

    # Look for "Explanation:" and "Category:" markers
    if "Explanation:" in text and "Category:" in text:
        explanation_start = text.index("Explanation:") + len("Explanation:")
        category_start = text.index("Category:")

        explanation = text[explanation_start:category_start].strip()
        category = text[category_start + len("Category:"):].strip()

    return explanation, category

# Function to process the sample
def process_sample(df_sample):
    results = []
    
    for i in tqdm(range(0, len(df_sample), batch_size), desc="Processing"):
        batch_texts = df_sample['combined_text'].iloc[i:i+batch_size].tolist()

        # Combine the text into the prompt
        prompts = [prompt_template.format(input_text=text) for text in batch_texts]
        
        # Process batches asynchronously
        batch_responses = generation_pipeline(prompts, max_new_tokens=100, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)
        
        # Extract generated text from batch_responses
        for response in batch_responses:
            generated_text = response[0]['generated_text'] if isinstance(response, list) else response['generated_text']
            results.append(generated_text)
    
    # Combine the results into a single column
    df_sample['final_response'] = results

    # Extract the explanation and category into separate columns
    df_sample[['explanation', 'category']] = df_sample['final_response'].apply(lambda x: pd.Series(extract_explanation_category(x)))

    return df_sample

# Process the sample and save the output
output_file = '/mnt/data/Salesforce_Deals_Text_Analytics_Output_Sample.csv'

processed_sample = process_sample(df_sample)
processed_sample.to_csv(output_file, index=False)

print(f"Processing complete. Output saved to {output_file}.")
