# Function for POS tagging
def pos_tagging(text):
    doc = nlp(text)
    return [(token.text, token.pos_) for token in doc]

# Function for Named Entity Recognition (NER)
def extract_entities(text):
    doc = nlp(text)
    entities = [(ent.text, ent.label_) for ent in doc.ents]
    return entities

# Apply POS tagging and NER on Non-RST processed text
non_rst_data['pos_tags'] = non_rst_data['processed_text'].apply(pos_tagging)
non_rst_data['named_entities'] = non_rst_data['processed_text'].apply(extract_entities)

# Display examples of POS tagging and NER
print("\nExample of POS Tagging (first row):")
print(non_rst_data['pos_tags'].iloc[0])

print("\nExample of Named Entities (first row):")
print(non_rst_data['named_entities'].iloc[0])

# Analyze top 10 POS tags
all_pos_tags = [pos for tags in non_rst_data['pos_tags'] for _, pos in tags]
pos_counts = Counter(all_pos_tags).most_common(10)

print("\nTop 10 POS Tags:")
print(pos_counts)

# Visualize POS tag distribution
pos_df = pd.DataFrame(pos_counts, columns=['POS', 'Frequency'])
plt.figure(figsize=(10, 6))
sns.barplot(x='POS', y='Frequency', data=pos_df, palette='viridis')
plt.title('Top 10 POS Tags', fontsize=16, weight='bold')
plt.xlabel('Part of Speech', fontsize=14, weight='bold')
plt.ylabel('Frequency', fontsize=14, weight='bold')
plt.tight_layout()
plt.show()

# Analyze top 10 Named Entities
all_entities = [entity for entities in non_rst_data['named_entities'] for entity, label in entities]
entity_counts = Counter(all_entities).most_common(10)

print("\nTop 10 Named Entities:")
print(entity_counts)

# Visualize Named Entity distribution
entity_df = pd.DataFrame(entity_counts, columns=['Entity', 'Frequency'])
plt.figure(figsize=(10, 6))
sns.barplot(x='Entity', y='Frequency', data=entity_df, palette='coolwarm')
plt.title('Top 10 Named Entities', fontsize=16, weight='bold')
plt.xlabel('Entity', fontsize=14, weight='bold')
plt.ylabel('Frequency', fontsize=14, weight='bold')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()
