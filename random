import pandas as pd
import spacy
from spacy.lang.en.stop_words import STOP_WORDS
import gensim
import matplotlib.pyplot as plt
import seaborn as sns
import re
import pyLDAvis.gensim_models as gensimvis
import pyLDAvis

# Load Spacy model (without custom stopwords)
nlp = spacy.load('en_core_web_md', disable=['parser', 'ner'])

# Function to preprocess text
def preprocess(document):
    # Lowercase the text
    document = document.lower()
    # Remove special characters and numbers
    document = re.sub(r'[^a-zA-Z\s]', '', document)
    # Remove extra whitespace
    document = re.sub(r'\s+', ' ', document).strip()
    # Tokenize and Lemmatize
    doc = nlp(document)
    # Only default stopwords from Spacy, no custom stopwords
    words = [token.lemma_ for token in doc if not token.is_stop and not token.is_punct and len(token.lemma_) > 2]
    return words

# Read data from Salesforce analytics
df_salesforce = pd.read_excel('Data/exclude_won_rst.xlsx')

# Concatenate text columns into a single string variable
df_salesforce['combined_text'] = df_salesforce[['record_comment_text', 
                                                'executive_summary_text', 
                                                'win_loss_reason_text', 
                                                'win_loss_comments_text']].apply(lambda x: ' '.join(x.dropna()), axis=1)

# 1. Print total deal count
total_deal_count = len(df_salesforce)
print(f"Total Deal Count: {total_deal_count}")

# 2. Check how many rows are missing after combining the data
missing_rows = df_salesforce['combined_text'].isna().sum()
print(f"Number of missing rows in 'combined_text': {missing_rows}")

# 3. Separate the data based on 'account_eci' column
numerical_eci_dataset = df_salesforce[df_salesforce['account_eci'].apply(lambda x: isinstance(x, (int, float)))]
rst_eci_dataset = df_salesforce[df_salesforce['account_eci'] == 'RST']

# Print the count of each category
print(f"Numerical ECI Count: {len(numerical_eci_dataset)}")
print(f"RST ECI Count: {len(rst_eci_dataset)}")

# Save the datasets to separate files
numerical_eci_dataset.to_csv('numerical_eci_dataset.csv', index=False)
rst_eci_dataset.to_csv('rst_eci_dataset.csv', index=False)

# 4. Count word tokens for each row before processing and append this to numerical ECI dataset
numerical_eci_dataset['token_count'] = numerical_eci_dataset['combined_text'].apply(lambda x: len(x.split()))

# Save the updated numerical_eci_dataset with token count
numerical_eci_dataset.to_csv('numerical_eci_with_token_count.csv', index=False)

# 5. Perform topic modeling on rows with more than 3 word tokens
numerical_eci_gt_3_tokens = numerical_eci_dataset[numerical_eci_dataset['token_count'] > 3]

# Preprocessing text columns
numerical_eci_gt_3_tokens['processed_text'] = numerical_eci_gt_3_tokens['combined_text'].map(preprocess)
processed_texts = numerical_eci_gt_3_tokens['processed_text'].tolist()

# Building bi-gram and tri-gram models
bigram = gensim.models.Phrases(processed_texts, min_count=10)  # Min count increased for bigrams
trigram = gensim.models.Phrases(bigram[processed_texts], min_count=10)  # Add trigram modeling

# Add bigrams and trigrams to the processed texts
for idx in range(len(processed_texts)):
    for token in trigram[bigram[processed_texts[idx]]]:
        if '_' in token:
            processed_texts[idx].append(token)

# Creating dictionary
dictionary = gensim.corpora.Dictionary(processed_texts)

# Filtering dictionary
dictionary.filter_extremes(no_below=int(len(processed_texts) * 0.01), no_above=0.5)

# Creating the corpus
corpus = [dictionary.doc2bow(text) for text in processed_texts]

# Compute coherence values for different numbers of topics using grid search
def compute_coherence_values(dictionary, corpus, texts, limit, start=2, step=1):
    coherence_values = []
    model_list = []
    for num_topics in range(start, limit, step):
        # Fine-tuning LDA parameters with more passes and auto alpha/eta
        model = gensim.models.LdaMulticore(
            corpus=corpus,
            num_topics=num_topics,
            id2word=dictionary,
            passes=20,  # Increased number of passes
            alpha='auto',  # Adjust alpha and eta for better performance
            eta='auto',
            workers=2,
            random_state=5
        )
        model_list.append(model)
        coherence_model = gensim.models.CoherenceModel(
            model=model,
            texts=texts,
            dictionary=dictionary,
            coherence='c_v'
        )
        coherence_values.append(coherence_model.get_coherence())
    return model_list, coherence_values

# Run the grid search for optimal number of topics
model_list, coherence_values = compute_coherence_values(dictionary, corpus, processed_texts, limit=20, start=2, step=2)

# Find the model with the highest coherence value
optimal_model = model_list[coherence_values.index(max(coherence_values))]

# Extracting top words from each topic
def extract_top_words(model, num_words):
    top_words_per_topic = []
    for topic_id in range(model.num_topics):
        top_words = model.show_topic(topic_id, num_words)
        top_words_per_topic.append(" ".join([word for word, _ in top_words]))
    return top_words_per_topic

top_words_per_topic = extract_top_words(optimal_model, 5)

# Assigning main topic column to dataframe
def get_main_topic(corpus):
    topic_weights = optimal_model[corpus]
    main_topic = max(topic_weights, key=lambda x: x[1])
    return main_topic[0]

numerical_eci_gt_3_tokens['main_topic'] = [get_main_topic(corp) for corp in corpus]

# Adding the topic name correlated with main topic rank
numerical_eci_gt_3_tokens['main_topic_name'] = numerical_eci_gt_3_tokens['main_topic'].apply(lambda x: top_words_per_topic[x])

# Export the main topic information to a CSV file
numerical_eci_gt_3_tokens.to_csv('numerical_eci_topic_modeling.csv', index=False)

# 6. Save rows with fewer than 3 tokens separately
numerical_eci_lt_3_tokens = numerical_eci_dataset[numerical_eci_dataset['token_count'] <= 3]
numerical_eci_lt_3_tokens.to_csv('numerical_eci_lt_3_tokens.csv', index=False)
print(f"Rows with less than or equal to 3 tokens: {len(numerical_eci_lt_3_tokens)}")

# Plotting the distribution of topics with top words as labels
topic_counts = numerical_eci_gt_3_tokens['main_topic'].value_counts().sort_index()

plt.style.use('fivethirtyeight')
plt.figure(figsize=(12, 6))
sns.barplot(x=topic_counts.index, y=topic_counts.values)
plt.xticks(range(len(top_words_per_topic)), [top_words_per_topic[i] for i in topic_counts.index], rotation=45, ha='right')
plt.xlabel('Topic')
plt.ylabel('Number of Deals')
plt.title("Distribution of Topics in Deals")
plt.show()

# Visualize topics with pyLDAvis
vis = gensimvis.prepare(optimal_model, corpus, dictionary)
pyLDAvis.display(vis)
