

# Maximum length of input tokens
max_input_length = 200

# Batch processing size
batch_size = 10

# Define the parse_response function to extract structured information without regular expressions
def parse_response(response):
    lines = response.split('\n')
    product_group = ""
    key_features = []
    theme_summary = ""

    for line in lines:
        if line.startswith("Product Group:"):
            product_group = line[len("Product Group:"):].strip()[1:-1]  # Remove leading and trailing brackets
        elif line.startswith("Key Features:"):
            features_str = line[len("Key Features:"):].strip()[1:-1]  # Remove leading and trailing brackets
            key_features = features_str.split(', ')
        elif line.startswith("Theme Summary:"):
            theme_summary = line[len("Theme Summary:"):].strip()[1:-1]  # Remove leading and trailing brackets

    return {
        "Product Group": product_group,
        "Key Features": key_features,
        "Theme Summary": theme_summary
    }

# Function to process and parse results
def process_and_parse(df_sample, one_shot_template, batch_size=10):
    results = []
    for i in tqdm(range(0, len(df_sample), batch_size), desc="Processing"):
        batch_texts = df_sample['combined_text'].iloc[i:i+batch_size].tolist()
        truncated_texts = [tokenizer.decode(tokenizer.encode(text, max_length=max_input_length, truncation=True), skip_special_tokens=True) for text in batch_texts]
        prompts = [one_shot_template.format(input_text=text) for text in truncated_texts]

        batch_responses = generation_pipeline(prompts, max_new_tokens=50, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)
        for response in batch_responses:
            generated_text = response[0]['generated_text'] if isinstance(response, list) and 'generated_text' in response[0] else response['generated_text']
            results.append(generated_text)
    
    df_sample['final_response'] = results
    df_sample['all_information'] = df_sample['final_response'].apply(parse_response)
    return df_sample

# Process and parse the data
df_processed = process_and_parse(df_sample, one_shot_template_theme)
df_processed.to_csv('/mnt/data/Theme_Analysis.csv', index=False)

# Optional: Display the data
print(df_processed['all_information'])
