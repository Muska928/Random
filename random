import re
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
from tqdm import tqdm
import torch
from transformers import BitsAndBytesConfig
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter


# Preprocess the text
def preprocess_text(text):
    text = text.lower()  # Convert text to lowercase
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove special characters and numbers
    text = re.sub(r'\s+', ' ', text).strip()  # Remove extra whitespace
    return text

# Apply preprocessing
df_salesforce['combined_text'] = df_salesforce['combined_text'].apply(preprocess_text)

# Sample 10 records for testing
df_sample = df_salesforce.sample(n=10, random_state=42)  # random_state for reproducibility

# Load Mistral model and tokenizer from the specified folder with device_map='auto'
model_path = "mistral/Mistral-7B-Instruct-v0.2"

tokenizer = AutoTokenizer.from_pretrained(
    model_path,
    trust_remote_code=True,
    padding_side="left",
    use_fast=True,
    add_bos_token=True,
    add_eos_token=True
)

tokenizer.pad_token = tokenizer.eos_token

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

# Ensure proper device mapping and loading
model = AutoModelForCausalLM.from_pretrained(
    model_path,
    quantization_config=bnb_config,
    torch_dtype=torch.bfloat16,
    device_map="auto",  # Ensure model is loaded with correct device mapping
    trust_remote_code=True,
)

model.config.use_cache = False  # silence the warnings
model.config.pretraining_tp = 1
model.gradient_checkpointing_enable()

# Sentiment analysis pipeline with the Mistral instruct model
generation_pipeline = pipeline('text-generation', model=model, tokenizer=tokenizer)  # No device argument here


# Maximum length of input tokens
max_input_length = 200

# Batch processing size
batch_size = 10

# Generate the output
theme_results = []
for i in tqdm(range(0, len(df_sample), batch_size), desc="Processing"):
    batch_texts = df_sample['combined_text'].iloc[i:i+batch_size].tolist()
    truncated_texts = [tokenizer.decode(tokenizer.encode(text, max_length=max_input_length, truncation=True), skip_special_tokens=True) for text in batch_texts]
    prompts = [one_shot_template.format(input_text=text) for text in truncated_texts]

    # Process batches asynchronously
    batch_responses = generation_pipeline(prompts, max_new_tokens=50, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)

    # Extract generated text from batch_responses
    for response in batch_responses:
        generated_text = response[0]['generated_text'] if isinstance(response, list) and 'generated_text' in response[0] else response['generated_text']
        theme_results.append(generated_text)

# Parse the results and extract themes
def parse_themes(response):
    themes = []
    lines = response.split('\n')
    for line in lines:
        if line.startswith('Themes:'):
            themes = line.replace('Themes:', '').strip().split(',')
            themes = [theme.strip() for theme in themes]
    return themes

# Extract and count themes
all_themes = []
for response in theme_results:
    themes = parse_themes(response)
    all_themes.extend(themes)

theme_counts = Counter(all_themes)

# Visualize the distribution of themes
plt.figure(figsize=(12, 8))
plt.bar(theme_counts.keys(), theme_counts.values())
plt.xlabel('Themes')
plt.ylabel('Number of Deals')
plt.title('Distribution of Themes in Deals')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()
