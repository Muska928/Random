import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.preprocessing import OneHotEncoder, FunctionTransformer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import KBinsDiscretizer, StandardScaler
from scipy.stats import skew

# Simulated placeholder data
np.random.seed(42)
df = pd.DataFrame({
    'pli_type': np.random.choice(['SETUP NEW', 'SETUP EXISTING'], size=500),
    'paper_eob_conversion_to_835_flag': np.random.choice([0, 1], size=500),
    'browser_access_flag': np.random.choice([0, 1], size=500),
    'patient_payment_flag': np.random.choice([0, 1], size=500),
    'reconciliation_manager_enterprise_flag': np.random.choice([0, 1], size=500),
    'corr_index_flag': np.random.choice([0, 1], size=500),
    'outbound_transmission_commercial_flag': np.random.choice([0, 1], size=500),
    'hcl_image_transmission_flag': np.random.choice([0, 1], size=500),
    'is_image_file_used': np.random.choice([0, 1], size=500),
    'has_multiple_flags_on': np.random.randint(0, 5, size=500),
    'cycle_time': np.random.gamma(shape=2.0, scale=30.0, size=500)
})

# Check for skewness
cycle_time_skew = skew(df['cycle_time'])

# Apply log transformation if skewed
if cycle_time_skew > 1:
    df['cycle_time'] = np.log1p(df['cycle_time'])

# Feature sets
target = 'cycle_time'
numeric_features = ['has_multiple_flags_on', 'is_image_file_used']
categorical_features = [col for col in df.columns if col not in numeric_features + [target]]

# Preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(drop='first'), categorical_features),
        ('num', StandardScaler(), numeric_features)
    ]
)

# Model pipeline with Random Forest
pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(
    df.drop(columns=[target]), df[target], test_size=0.2, random_state=42
)

# Train and predict
pipeline.fit(X_train, y_train)
y_pred = pipeline.predict(X_test)

# Evaluate
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Plot: Actual vs Predicted + numeric annotation
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred)
for i in range(len(y_test)):
    plt.annotate(round(y_test.values[i]), (y_test.values[i], y_pred[i]), fontsize=6, alpha=0.6)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')
plt.xlabel("Actual Cycle Time")
plt.ylabel("Predicted Cycle Time")
plt.title("Actual vs Predicted Cycle Time")
plt.text(0.05, 0.95, f"MAE: {mae:.2f}\nRÂ² Score: {r2:.2f}", transform=plt.gca().transAxes,
         verticalalignment='top', fontsize=10)
plt.grid(True)
plt.tight_layout()
plt.show()

# Linearity check: Is correlation high?
linear_check = np.corrcoef(y_test, y_pred)[0, 1]

linear_check, cycle_time_skew

