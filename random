# Step 1: Clean up input columns for reliable comparison
df['productflag_clean'] = df['productflag'].astype(str).str.lower().str.strip()
df['prod_tx_clean'] = df['prod_tx'].astype(str).str.lower().str.strip()

# Step 2: Define filters
flag_access = df[df['productflag_clean'] == 'access']
tx_access = df[df['prod_tx_clean'].str.contains('access', na=False)]
combined_access = df[
    (df['productflag_clean'] == 'access') &
    (df['prod_tx_clean'].str.contains('access', na=False))
]

# Step 3: Print row counts before and after filtering
print("Access Product Filtering Summary")
print("-" * 50)
print(f"1. Rows where productflag == 'Access'         : {flag_access.shape[0]:,}")
print(f"2. Rows where prod_tx contains 'access'       : {tx_access.shape[0]:,}")
print(f"3. Rows where BOTH flag and prod_tx match     : {combined_access.shape[0]:,}")
print("-" * 50)

# Step 4: Identify mismatches
only_flag = flag_access[~flag_access.index.isin(combined_access.index)]
only_tx = tx_access[~tx_access.index.isin(combined_access.index)]

print(f"4. Flag = Access but prod_tx does NOT contain 'access' : {only_flag.shape[0]:,}")
print(f"5. prod_tx contains 'access' but flag is not Access     : {only_tx.shape[0]:,}")

# Step 5: Preview mismatches (optional)
print("\nExamples where productflag is 'Access' but prod_tx lacks 'access':")
print(only_flag[['prod_tx', 'productflag']].drop_duplicates().head())

print("\nExamples where prod_tx has 'access' but productflag is not 'Access':")
print(only_tx[['prod_tx', 'productflag']].drop_duplicates().head())
