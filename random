def extract_classification(text):
    # Initialize default values
    high_level_category = "Not available"
    sub_category = "Not available"
    specific_process = "Not available"

    # Log full generated text for debugging
    print(f"Generated text:\n{text}\n")

    # Normalize text to handle extra spaces or inconsistencies
    text = text.replace("**", "").strip()  # Remove any Markdown formatting (**bold**)

    # Split the generated text by newlines
    lines = text.split("\n")
    
    # Iterate over each line to extract the relevant fields
    for line in lines:
        line = line.strip()  # Remove leading/trailing whitespace
        
        # Handle potential cases where the text might not follow the exact format
        if "Category:" in line:
            high_level_category = line.split("Category:")[1].strip() if "Category:" in line else high_level_category
        elif "Sub-category:" in line:
            sub_category = line.split("Sub-category:")[1].strip() if "Sub-category:" in line else sub_category
        elif "Process Description:" in line:
            specific_process = line.split("Process Description:")[1].strip() if "Process Description:" in line else specific_process
    
    # Log the extracted categories for debugging
    print(f"Extracted Category: {high_level_category}, Sub-Category: {sub_category}, Specific Process: {specific_process}")
    
    return high_level_category, sub_category, specific_process
