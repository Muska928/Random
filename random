# Step 5: Perform N-gram Analysis
def get_ngram_freqs(tokens_list, n):
    ngrams = zip(*[tokens_list[i:] for i in range(n)])
    return Counter([' '.join(ngram) for ngram in ngrams])

def display_ngrams(ngram_freq, title):
    ngram_df = pd.DataFrame(ngram_freq.most_common(30), columns=['ngram', 'frequency'])
    plt.figure(figsize=(12, 6))
    sns.barplot(x='ngram', y='frequency', data=ngram_df, palette='coolwarm')

    # Adding frequency counts on top of each bar
    for i in range(len(ngram_df)):
        plt.text(i, ngram_df['frequency'][i] + 0.5, str(ngram_df['frequency'][i]), ha='center', fontsize=12, fontweight='bold')

    plt.xticks(rotation=45, ha='right')
    plt.title(f"Top 30 {title}")
    plt.tight_layout()
    plt.show()

# Tokenize the cleaned text
tokens = non_rst_cleaned['cleaned_text'].apply(lambda x: x.split())

# Perform N-gram Analysis
unigram_freq = Counter([token for tokens_list in tokens for token in tokens_list])
bigram_freq = get_ngram_freqs([token for tokens_list in tokens for token in tokens_list], 2)
trigram_freq = get_ngram_freqs([token for tokens_list in tokens for token in tokens_list], 3)

# Display N-grams with counts on top of bars
display_ngrams(unigram_freq, 'Unigrams')
display_ngrams(bigram_freq, 'Bigrams')
display_ngrams(trigram_freq, 'Trigrams')
