import pandas as pd
from transformers import pipeline
from tqdm import tqdm

# Define the updated extraction function
def extract_information(text):
    lines = text.split("\n")
    category = "Not available"
    explanation = "Not available"
    
    # Clean up lines and look for "Category:" and "Explanation:"
    for line in lines:
        line = line.strip()  # Trim whitespace around the line
        if line.startswith("Category:"):
            parts = line.split(": ", 1)
            if len(parts) > 1:
                category = parts[1].strip()  # Get the category text and strip any surrounding spaces
        elif line.startswith("Explanation:"):
            parts = line.split(": ", 1)
            if len(parts) > 1:
                explanation = parts[1].strip()  # Get the explanation and strip any surrounding spaces
    return category, explanation

# Define the prompt template without predefined categories, asking for a 2-3 word category and an explanation
updated_prompt_template = """
You are a highly intelligent AI model trained to analyze and classify text based on its content.
Your task is to:
1. Summarize the main topic or focus of the following text in 2-3 words.
2. Provide a brief explanation for why this category fits the text.

### Instructions:
1. Read the provided text carefully.
2. Identify the main topic or focus of the text.
3. Summarize the topic in 2-3 words (e.g., "Client Relationship", "Account Setup").
4. Provide a short explanation of why you have chosen this category.

Now, classify the following text:

Text: "{input_text}"

Please provide your response in the following format:
1. Category: [A concise 2-3 word summary of the main topic]
2. Explanation: [Briefly explain why this classification fits the given text]
"""

# Load your DataFrame (assuming it's stored in a CSV or already loaded)
df = pd.read_csv('your_file.csv')  # Load your actual CSV or existing DataFrame

# Set up the text generation pipeline using your model
model = pipeline('text-generation', model='mistral/Mistral-7B-Instruct-v0.2', tokenizer='mistral/Mistral-7B-Instruct-v0.2')

# Define the batch processing size
batch_size = 10

# Prepare lists to store the categories and explanations
categories = []
explanations = []

# Process the DataFrame in batches
for i in tqdm(range(0, len(df), batch_size), desc="Processing"):
    batch_texts = df['combined_text'].iloc[i:i+batch_size].tolist()  # Get the batch of texts
    
    # Format the prompts for each text in the batch
    prompts = [updated_prompt_template.format(input_text=text) for text in batch_texts]
    
    # Process the batch asynchronously
    batch_responses = model(prompts, max_new_tokens=150, num_return_sequences=1)

    # Extract the category and explanation from each response using the updated extraction function
    for response in batch_responses:
        generated_text = response[0]['generated_text']  # Fix: access the first item in the list response
        
        # Debug: print the raw generated text to check the output
        print("Generated Text: ", generated_text)
        
        category, explanation = extract_information(generated_text)  # Use the extraction function to get category and explanation
        
        # Append the results
        categories.append(category)
        explanations.append(explanation)

# Add the results as new columns in the DataFrame
df['category'] = categories
df['explanation'] = explanations

# Save the DataFrame to a new CSV file
df.to_csv('classified_combined_text_with_explanation.csv', index=False)

# Display the first few rows to verify
print(df[['combined_text', 'category', 'explanation']].head())
