import pandas as pd
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
from tqdm import tqdm
import torch
from transformers import BitsAndBytesConfig

# Load data from Salesforce analytics (assuming you have 'combined_text', 'deal_type_name', and 'product_family_name' columns)
df_salesforce = pd.read_excel('/mnt/data/Salesforce_Deals_Text_Analytics.xlsx')

# No preprocessing required; assume combined_text column is ready to use
df_sample = df_salesforce  # Use the entire DataFrame

# Load Mistral model and tokenizer
model_path = "mistral/Mistral-7B-Instruct-v0.2"

tokenizer = AutoTokenizer.from_pretrained(
    model_path,
    trust_remote_code=True,
    padding_side="left",
    use_fast=True,
    add_bos_token=True,
    add_eos_token=True
)

tokenizer.pad_token = tokenizer.eos_token

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

model = AutoModelForCausalLM.from_pretrained(
    model_path,
    quantization_config=bnb_config,
    torch_dtype=torch.bfloat16,
    device_map="auto",
    trust_remote_code=True,
)

model.config.use_cache = False
model.config.pretraining_tp = 1
model.gradient_checkpointing_enable()

generation_pipeline = pipeline('text-generation', model=model, tokenizer=tokenizer)

# Process the entire dataset
results = []
batch_size = 10

for i in tqdm(range(0, len(df_sample), batch_size), desc="Processing"):
    batch_texts = df_sample['combined_text'].iloc[i:i+batch_size].tolist()
    deal_type_names = df_sample['deal_type_name'].iloc[i:i+batch_size].tolist()
    product_family_names = df_sample['product_family_name'].iloc[i:i+batch_size].tolist()

    # Generate prompts
    prompts = [
        updated_prompt_template.format(
            deal_type_name=deal_type, 
            product_family_name=product_family, 
            input_text=text
        ) 
        for deal_type, product_family, text in zip(deal_type_names, product_family_names, batch_texts)
    ]
    
    batch_responses = generation_pipeline(prompts, max_new_tokens=50, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)
    
    for response in batch_responses:
        if isinstance(response, list) and len(response) > 0 and 'generated_text' in response[0]:
            generated_text = response[0]['generated_text']
        elif 'generated_text' in response:
            generated_text = response['generated_text']
        else:
            generated_text = "No valid response"
        results.append(generated_text)

df_sample['final_response'] = results

# Extract the required information
def extract_information(text):
    lines = text.split("\n")
    objective = summary = category = reason = "Not available"
    
    for line in lines:
        if line.startswith("Objective:"):
            objective = line.split(": ")[1]
        elif line.startswith("Summary:"):
            summary = line.split(": ")[1]
        elif line.startswith("Category:"):
            category = line.split(": ")[1]
        elif line.startswith("Reason for Success:"):
            reason = line.split(": ")[1]
    
    return objective, summary, category, reason

df_sample[['objective', 'summary', 'category', 'reason_for_success']] = df_sample['final_response'].apply(lambda x: pd.Series(extract_information(x)))

# Save the results to a CSV file
df_sample.to_csv('/mnt/data/Salesforce_Deals_Text_Analytics_Output.csv', index=False)

# Display the DataFrame to verify results
print(df_sample[['objective', 'summary', 'category', 'reason_for_updated_prompt_template = """
You are an AI tasked with analyzing the given text to extract the objective, summarize the content, and categorize it. Use the following categories if applicable:

1. Strong Client Relationship and Market Engagement
2. Effective Pricing and Profitability
3. Operational Excellence and Process Efficiency
4. Product and Service Delivery
5. Innovative and Tailored Solutions

Consider the context provided by the deal type and product family. If none of the above categories apply, assign a different category based on the content.

Given the following details, provide your analysis:

Deal Type Name: {deal_type_name}
Product Family Name: {product_family_name}
Text: {input_text}

Provide your response in the following format:
Objective: [Briefly state the objective of the text]
Summary: [Summarize the content in a few sentences]
Category: [Category Name or a different relevant category]
Reason for Success: [Explain why the deal was successful or failed based on the category, deal type, and product family]
"""
