import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Set display and styling
pd.set_option('display.max_columns', None)
sns.set(style="whitegrid")
plt.rcParams["figure.figsize"] = (10, 6)

# Load Dataset
file_path = "your_file.csv"  # Replace with your actual file path
df = pd.read_csv(file_path)

# ----------------------------------------
# SECTION 0: ACCESS PRODUCT FILTERING LOGIC
# ----------------------------------------

# Step 1: Clean up input columns for reliable comparison
df['productflag_clean'] = df['productflag'].astype(str).str.lower().str.strip()
df['prod_tx_clean'] = df['prod_tx'].astype(str).str.lower().str.strip()

# Step 2: Define filters
flag_access = df[df['productflag_clean'] == 'access']
tx_access = df[df['prod_tx_clean'].str.contains('access', na=False)]
combined_access = df[
    (df['productflag_clean'] == 'access') &
    (df['prod_tx_clean'].str.contains('access', na=False))
]

# Step 3: Print row counts before and after filtering
print("Access Product Filtering Summary")
print("-" * 50)
print(f"1. Rows where productflag == 'Access'         : {flag_access.shape[0]:,}")
print(f"2. Rows where prod_tx contains 'access'       : {tx_access.shape[0]:,}")
print(f"3. Rows where BOTH flag and prod_tx match     : {combined_access.shape[0]:,}")
print("-" * 50)

# Assign filtered dataset for further analysis
df_access = combined_access.copy()
print(f"\nFiltered Access Dataset Shape: {df_access.shape}")

# ----------------------------------------
# SECTION 1: BUSINESS-FRIENDLY DATA QUALITY CHECK
# ----------------------------------------

print("\n--- DATA QUALITY SUMMARY ---")

# 1. Missing Values
missing = df_access.isnull().sum()
missing_pct = (missing / len(df_access)) * 100
missing_df = pd.DataFrame({
    'Missing Count': missing,
    'Missing %': missing_pct.round(2)
}).sort_values(by='Missing %', ascending=False)
missing_df = missing_df[missing_df['Missing Count'] > 0]

print("\nTop Fields with Missing Data:")
print(missing_df.head(10))

# 2. Constant Columns
constant_cols = [col for col in df_access.columns if df_access[col].nunique(dropna=False) == 1]
print(f"\nColumns with No Variation: {len(constant_cols)}")
if constant_cols:
    print(constant_cols)

# 3. Duplicate Check
dup_count = df_access.duplicated().sum()
print(f"\nDuplicate Records: {dup_count:,}")

# 4. Out-of-Range PLI Scores
if 'pli_score' in df_access.columns:
    invalid_pli_score = df_access[(df_access['pli_score'] < 0) | (df_access['pli_score'] > 100)]
    print(f"\nOut-of-Range PLI Scores (>100 or <0): {len(invalid_pli_score)} rows")
    if not invalid_pli_score.empty:
        print(invalid_pli_score[['pli_score']].head())

# ----------------------------------------
# SECTION 2: NUMERIC PROFILE
# ----------------------------------------

numeric = df_access.select_dtypes(include='number')
print("\nSummary Stats for Numeric Fields:")
print(numeric.describe().T[['count', 'mean', 'std', 'min', 'max']].round(2))

# ----------------------------------------
# SECTION 3: CATEGORICAL DISTRIBUTIONS
# ----------------------------------------

cat_cols = df_access.select_dtypes(include='object')
cat_cardinality = {col: df_access[col].nunique() for col in cat_cols.columns}
cat_card_df = pd.DataFrame.from_dict(cat_cardinality, orient='index', columns=['Unique Values'])
cat_card_df = cat_card_df.sort_values(by='Unique Values', ascending=False)

print("\nTop Categorical Fields by Unique Values:")
print(cat_card_df.head(10))

# ----------------------------------------
# SECTION 4: VISUALS FOR BUSINESS INSIGHTS
# ----------------------------------------

# 1. Product Distribution by Transaction Name
if 'prod_tx' in df_access.columns:
    top_tx = df_access['prod_tx'].value_counts().head(5)
    plt.figure(figsize=(7, 7))
    plt.pie(top_tx, labels=top_tx.index, autopct='%1.1f%%', startangle=140)
    plt.title("Distribution of Top 5 Product Transactions")
    plt.tight_layout()
    plt.axis('equal')
    plt.show()

# 2. Product Complexity Distribution
if 'product_complexity_cb' in df_access.columns:
    plt.figure(figsize=(8, 5))
    sns.countplot(data=df_access, x='product_complexity_cb',
                  order=df_access['product_complexity_cb'].value_counts().index,
                  palette='Blues')
    plt.title("Count of Records by Product Complexity Level")
    plt.xlabel("Product Complexity")
    plt.ylabel("Record Count")
    plt.xticks(rotation=15)
    plt.tight_layout()
    plt.show()

# ----------------------------------------
# SECTION 5: SUGGESTED EDA EXTENSIONS
# ----------------------------------------

print("\nRecommended Next Steps for Analysis:")
print("- Compare PLI cycle times across complexity levels.")
print("- Analyze delay drivers: On-hold time, rejection flags, error counts.")
print("- Segment by client type, business unit, or team if available.")
print("- Evaluate bundled vs. standalone PLI impact on turnaround.")
