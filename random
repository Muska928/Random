import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows

# Read data from Excel files
actual_df = pd.read_excel('Actual_29_MS_2.xlsx')
forecast_df = pd.read_excel('Prediction_29_MS_2.xlsx')

# Convert the 'Forecast For Date' columns to datetime type
actual_df['Forecast For Date'] = pd.to_datetime(actual_df['Forecast For Date'])
forecast_df['Forecast For Date'] = pd.to_datetime(forecast_df['Forecast For Date'])

# Create a new workbook and select the active worksheet
wb = Workbook()
ws = wb.active
ws.title = "Monthly Forecast Check"

# Define the headers
headers = ["Forecast Segment", "Actual Date", "Actual", "Forecast", "% Variance"]
ws.append(headers)

# Function to calculate percentage variance
def calculate_percentage_variance(actual, forecast):
    return round(((forecast - actual) / abs(actual)) * 100, 2) if actual != 0 else 0

# Merge actual and forecast data
merged_data = pd.merge(actual_df, forecast_df, on=["Forecast Segment", "Forecast For Date"])
merged_data['% Variance'] = merged_data.apply(lambda row: calculate_percentage_variance(row['Actual'], row['Forecast']), axis=1)

# Write data to worksheet
for row in dataframe_to_rows(merged_data[['Forecast Segment', 'Forecast For Date', 'Actual', 'Forecast', '% Variance']], index=False, header=False):
    ws.append(row)

# Calculate and append the grand total
grand_total_actual = merged_data['Actual'].sum()
grand_total_forecast = merged_data['Forecast'].sum()
grand_total_percentage_variance = calculate_percentage_variance(grand_total_actual, grand_total_forecast)

ws.append([
    "Grand Total",
    "",  # Placeholder for the date column
    grand_total_actual,
    grand_total_forecast,
    grand_total_percentage_variance
])

# Style the header
header_font = Font(bold=True)
header_alignment = Alignment(horizontal="center")
for cell in ws["1:1"]:
    cell.font = header_font
    cell.alignment = header_alignment

# Style the grand total row
grand_total_font = Font(bold=True)
for cell in ws[ws.max_row]:
    cell.font = grand_total_font

# Adjust column widths
for column in ws.columns:
    max_length = max(len(str(cell.value)) for cell in column)
    adjusted_width = max_length + 2
    ws.column_dimensions[column[0].column_letter].width = adjusted_width

# Save the workbook
wb.save("Monthly_Forecast_Check.xlsx")

print("Excel file 'Monthly_Forecast_Check.xlsx' has been created successfully.")

