import pandas as pd
import spacy
from collections import Counter
import matplotlib.pyplot as plt
import seaborn as sns
import re
import gensim
from datetime import datetime
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import string

# Load Spacy model (without custom stopwords)
nlp = spacy.load('en_core_web_md', disable=['parser', 'ner'])
nlp.max_length = 2000000  # Increase SpaCy's max_length to handle larger texts

# Contractions and abbreviations mapping
contractions_dict = {
    "ain't": "are not","'s":" is","aren't": "are not","can't": "cannot","can't've": "cannot have",
    "'cause": "because","could've": "could have","couldn't": "could not","couldn't've": "could not have",
    "didn't": "did not","doesn't": "does not","don't": "do not","hadn't": "had not","hadn't've": "had not have",
    "hasn't": "has not","haven't": "have not","he'd": "he would","he'd've": "he would have","he'll": "he will",
    "he'll've": "he will have","how'd": "how did","how'd'y": "how do you","how'll": "how will","I'd": "I would",
    "I'd've": "I would have","I'll": "I will","I'll've": "I will have","I'm": "I am","I've": "I have","isn't": "is not",
    "it'd": "it would","it'd've": "it would have","it'll": "it will","it'll've": "it will have","let's": "let us",
    "ma'am": "madam","mayn't": "may not","might've": "might have","mightn't": "might not","mightn't've": "might not have",
    "must've": "must have","mustn't": "must not","mustn't've": "must not have","needn't": "need not","needn't've": "need not have",
    "o'clock": "of the clock","oughtn't": "ought not","oughtn't've": "ought not have","shan't": "shall not",
    "sha'n't": "shall not","shan't've": "shall not have","she'd": "she would","she'd've": "she would have","she'll": "she will",
    "she'll've": "she will have","should've": "should have","shouldn't": "should not","shouldn't've": "should not have",
    "so've": "so have","that'd": "that would","that'd've": "that would have","there'd": "there would","there'd've": "there would have",
    "they'd": "they would","they'd've": "they would have","they'll": "they will","they'll've": "they will have","they're": "they are",
    "they've": "they have","to've": "to have","wasn't": "was not","we'd": "we would","we'd've": "we would have","we'll": "we will",
    "we'll've": "we will have","we're": "we are","we've": "we have","weren't": "were not","what'll": "what will","what'll've": "what will have",
    "what're": "what are","what've": "what have","when've": "when have","where'd": "where did","where've": "where have",
    "who'll": "who will","who'll've": "who will have","who've": "who have","why've": "why have","will've": "will have",
    "won't": "will not","won't've": "will not have","would've": "would have","wouldn't": "would not","wouldn't've": "would not have",
    "y'all": "you all","y'all'd": "you all would","y'all'd've": "you all would have","y'all're": "you all are",
    "y'all've": "you all have","you'd": "you would","you'd've": "you would have","you'll": "you will","you'll've": "you will have",
    "you're": "you are","you've": "you have"
}

# Function to expand contractions
contractions_re = re.compile('(%s)' % '|'.join(contractions_dict.keys()))
def expand_contractions(text):
    def replace(match):
        return contractions_dict[match.group(0)]
    return contractions_re.sub(replace, text)

# Function to remove stopwords
stop_words = set(stopwords.words('english'))
def remove_stopwords(article):
    article_tokens = word_tokenize(article)
    filtered_article = [word for word in article_tokens if not word in stop_words]
    return " ".join(filtered_article)

# Function to remove punctuation
def remove_punctuation(text):
    return re.sub('[%s]' % re.escape(string.punctuation), '', text)

# Function to remove digits
def remove_digits(text):
    return re.sub('\w*\d\w*', '', text)

# Function to remove extra marks like quotation marks, hyphens
def remove_extra_marks(text):
    extra_keys = ["’","—","”","“"]
    return re.sub('|'.join(map(re.escape, extra_keys)), '', text)

# Function to lemmatize text
def lemmatize(text):
    doc = nlp(text)
    return " ".join([token.lemma_ for token in doc])

# Full preprocessing function applying all steps in order
def full_preprocess(text):
    text = text.lower()  # Step 1: Lowercasing
    text = expand_contractions(text)  # Step 2: Expand contractions
    text = remove_punctuation(text)  # Step 3: Remove punctuations
    text = remove_digits(text)  # Step 4: Remove digits
    text = remove_extra_marks(text)  # Step 5: Remove extra marks
    text = remove_stopwords(text)  # Step 6: Remove stopwords
    text = lemmatize(text)  # Step 7: Lemmatization
    return text

# Load data
df_salesforce = pd.read_excel('Data/Closed_Won_Reasons/Closed_Won_Product_Capability.xlsx')

# Concatenate text columns into a single string variable
df_salesforce['combined_text'] = df_salesforce[['record_comment_text', 
                                                'executive_summary_text', 
                                                'win_loss_comments_text']].apply(lambda x: ' '.join(x.dropna()), axis=1)

# Take the first row to test preprocessing
first_row_text = df_salesforce['combined_text'].iloc[0]
print("Original Text:\n", first_row_text)

# Apply full preprocessing on the first row
processed_first_row = full_preprocess(first_row_text)
print("\nProcessed Text:\n", processed_first_row)
