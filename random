def classify_texts(df_batch):
    assigned_categories = []
    sub_categories = []
    specific_processes = []
    account_opening_flags = []

    updated_prompt_template = """
    You are an AI tasked with reading a text related to financial and business processes. First, determine if this case is related to **Account Opening**.

    - If it mentions actual account creation (e.g., "Account Opening", "New Account", "Account Setup"), assign it as **Account Opening** and include any specific location mentioned.
    - If it mentions **interest** or **inquiry** without actual opening (e.g., "Client interested", "Inquiry about account"), assign the category as **Not Account Opening** and use "Client Interest" as the sub-category.
    - If it involves modifications to an **existing account**, assign it as **Already Existing Account**.

    After categorizing the text into one of these high-level categories, you must also provide a sub-category and describe the specific process in 2-3 words that is happening in the text.

    If none of the categories fit, assign **Others** for both High-Level and Sub-Category.

    Text: "{input_text}"

    ### Response Format:
    1. High-Level Category: [Account Opening / Already Existing Account / Not Account Opening / Others]
    2. Sub-Category: [Assigned Sub-Category with Location (if applicable) or "Others"]
    3. Specific Process: [2-3 word process description]
    """

    batch_texts = df_batch["combined_text"].tolist()

    for text in batch_texts:
        if text in assignment_memory:
            assigned_category, sub_category, specific_process = assignment_memory[text]
            assigned_categories.append(assigned_category)
            sub_categories.append(sub_category)
            specific_processes.append(specific_process)

            if "Account Opening" in assigned_category:
                account_opening_flags.append("Yes")
            else:
                account_opening_flags.append("No")
        else:
            # Create the prompt
            prompt = updated_prompt_template.format(input_text=text)

            # Explicit tokenization with input token limit
            input_tokens = tokenizer(prompt, max_length=512, truncation=True, return_tensors='pt')

            # Generate response with output token limit
            response = generation_pipeline(prompt, max_new_tokens=200, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)

            generated_text = response[0]['generated_text'] if response else "No valid response"

            high_level_category, sub_category, process = extract_classification(generated_text)

            if high_level_category == "Not available":
                high_level_category = "Others"
            if sub_category == "Not available":
                sub_category = "Others"

            assigned_categories.append(high_level_category)
            sub_categories.append(sub_category)
            specific_processes.append(process)
            
            if high_level_category == "Account Opening":
                account_opening_flags.append("Yes")
            else:
                account_opening_flags.append("No")

            assignment_memory[text] = (high_level_category, sub_category, process)

    df_batch['assigned_category'] = assigned_categories
    df_batch['sub_category'] = sub_categories
    df_batch['specific_process'] = specific_processes
    df_batch['is_related_to_account_opening'] = account_opening_flags

    return df_batch
