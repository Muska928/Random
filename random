# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import gensim
from gensim.models import CoherenceModel

# Function to extract topics and frequencies from the LDA model
def extract_lda_topics(lda_model, corpus, topn=10):
    # Extracting topics and their word distributions
    topic_summary = []
    
    for i, topic in lda_model.show_topics(num_topics=lda_model.num_topics, formatted=False):
        topic_words = [word for word, _ in topic]
        # Summing up the frequency for each topic across the corpus
        topic_frequency = sum([freq for topic_num, freq in lda_model.get_document_topics(corpus, minimum_probability=0.0) if topic_num == i])
        topic_summary.append((i, ' '.join(topic_words[:topn]), int(topic_frequency)))  # Show top 'topn' words in the topic
    
    # Convert to DataFrame for easier plotting
    topics_df = pd.DataFrame(topic_summary, columns=['Topic Number', 'Topic Name', 'Frequency'])
    return topics_df

# Function to plot LDA topic frequency
def plot_lda_topics(topics_df):
    plt.figure(figsize=(12, 6))
    
    # Sort topics by frequency for better visual presentation
    topics_df = topics_df.sort_values(by='Frequency', ascending=False)
    
    sns.barplot(x='Topic Name', y='Frequency', data=topics_df, palette='coolwarm')

    # Adding text labels on bars for each frequency value
    for index, value in enumerate(topics_df['Frequency']):
        plt.text(index, value, str(value), ha='center', va='bottom', fontsize=10)

    plt.xticks(rotation=45, ha='right')
    plt.title('LDA Topic Frequency Summary', fontsize=14)
    plt.tight_layout()
    plt.show()

# Function to apply LDA after bigram and trigram creation
def apply_lda(processed_texts, num_topics=10, passes=10):
    # Create bigram and trigram models
    bigram = gensim.models.Phrases(processed_texts, min_count=10)
    trigram = gensim.models.Phrases(bigram[processed_texts], min_count=10)

    # Add bigrams and trigrams to texts
    processed_texts_with_ngrams = []
    for idx in range(len(processed_texts)):
        trigram_tokens = trigram[bigram[processed_texts[idx]]]
        processed_texts_with_ngrams.append(trigram_tokens)
    
    # Create dictionary and corpus
    dictionary = gensim.corpora.Dictionary(processed_texts_with_ngrams)
    dictionary.filter_extremes(no_below=5, no_above=0.5)
    corpus = [dictionary.doc2bow(text) for text in processed_texts_with_ngrams]

    # Train LDA model
    lda_model = gensim.models.LdaMulticore(
        corpus=corpus,
        id2word=dictionary,
        num_topics=num_topics,
        random_state=100,
        chunksize=100,
        passes=passes,
        alpha='asymmetric',
        eta='auto'
    )

    return lda_model, corpus, dictionary, processed_texts_with_ngrams

# Function to print ngrams
def print_ngrams(processed_texts_with_ngrams):
    # Print the bigram and trigram processed texts (5 examples)
    print("\n==== Corpus Examples with Bigrams/Trigrams ====\n")
    for i, text in enumerate(processed_texts_with_ngrams[:5]):
        print(f"Example {i + 1}: {' '.join(text)}")

# Function to compute coherence score
def compute_coherence_score(lda_model, processed_texts_with_ngrams, dictionary):
    coherence_model_lda = CoherenceModel(model=lda_model, texts=processed_texts_with_ngrams, dictionary=dictionary, coherence='c_v')
    coherence_score = coherence_model_lda.get_coherence()
    return coherence_score

# Main Code Execution

# Assume 'non_rst_cleaned' is the dataframe with preprocessed data
# Apply LDA and print the ngrams
processed_texts = non_rst_cleaned['processed_text'].apply(lambda x: x.split()).tolist()  # Assuming tokenize_text is already defined
lda_model, corpus, dictionary, processed_texts_with_ngrams = apply_lda(processed_texts, num_topics=10)

# Extract topics and their frequency counts
topics_df = extract_lda_topics(lda_model, corpus)

# Print the topic summary table
print("\n==== LDA Topic Frequency Summary ====\n")
print(topics_df.to_string(index=False))

# Plot LDA topics and their frequencies
plot_lda_topics(topics_df)

# Compute and print the coherence score
coherence_score = compute_coherence_score(lda_model, processed_texts_with_ngrams, dictionary)
print(f"\nCoherence Score for the LDA Model: {coherence_score:.4f}")
