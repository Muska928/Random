# Function to get n-gram frequency
def get_ngrams(corpus, n=1):
    """Returns the n most common n-grams from a corpus"""
    ngrams = zip(*[corpus[i:] for i in range(n)])
    return Counter([' '.join(ngram) for ngram in ngrams]).most_common(30)  # Top 30 n-grams

# Function to plot n-grams
def plot_ngrams(ngram_freq, title):
    ngram_df = pd.DataFrame(ngram_freq, columns=['ngram', 'frequency'])
    
    # Plot using Seaborn
    plt.figure(figsize=(12, 8))
    sns.barplot(x='ngram', y='frequency', data=ngram_df, palette='coolwarm')
    
    # Add frequency numbers on top of bars
    for index, value in enumerate(ngram_df['frequency']):
        plt.text(index, value, str(value), ha='center', va='bottom', fontsize=10)
    
    plt.xticks(rotation=45, ha='right', fontsize=12)
    plt.yticks(fontsize=12)
    plt.title(f'Top 30 {title}', fontsize=16, weight='bold')
    plt.xlabel(f'{title}', fontsize=14, weight='bold')
    plt.ylabel('Frequency', fontsize=14, weight='bold')
    plt.tight_layout()
    plt.show()

# Apply preprocessing to Non-RST data
non_rst_data = df_salesforce[df_salesforce['account_eci'] != 'RST']
non_rst_data.loc[:, 'processed_text'] = non_rst_data['combined_text'].apply(full_preprocess)

# Join all processed text into a single corpus
all_tokens = ' '.join(non_rst_data['processed_text']).split()

# Unigram, Bigram, Trigram Frequency Analysis
unigram_freq = get_ngrams(all_tokens, n=1)
bigram_freq = get_ngrams(all_tokens, n=2)
trigram_freq = get_ngrams(all_tokens, n=3)

# Plot n-grams
plot_ngrams(unigram_freq, 'Unigrams')
plot_ngrams(bigram_freq, 'Bigrams')
plot_ngrams(trigram_freq, 'Trigrams')
