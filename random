def classify_texts(df_batch):
    assigned_categories = []
    specific_processes = []
    account_opening_flags = []
    repetition_labels = []
    reasons = []
    key_actions = []
    entities_involved = []

    # Define the updated prompt template for classification and detailed context
    updated_prompt_template = """
    You are an AI tasked with reading a text related to financial and business processes. First, determine if this case is related to **Account Opening**.
    
    - If yes, keep the assigned category as **Account Opening** and include any specific location mentioned (e.g., "Account Opening in Dubai").
    - If no, based on your understanding of the text, assign a suitable category that reflects the context of the case and any relevant location (e.g., "Personnel Change in London").

    In addition to assigning a category, provide the following details:
    1. **Reason**: Why is this category assigned?
    2. **Key Actions**: What specific actions or tasks are mentioned in the text?
    3. **Entities Involved**: Are there any specific companies, people, or locations mentioned?

    After categorizing the text and providing additional details, you must also describe the specific process in 2-3 words.

    Text: "{input_text}"

    ### Response Format:
    1. Category: [Assigned Category with Location (if applicable)]
    2. Reason: [Reason for assigning the category]
    3. Key Actions: [Key actions mentioned in the text]
    4. Entities Involved: [Any companies, people, or locations mentioned]
    5. Specific Process: [2-3 word process description]
    """

    batch_texts = df_batch["combined_text"].tolist()

    for text in batch_texts:
        # Check if the text has been previously classified
        if text in assignment_memory:
            assigned_category, reason, actions, entities, process = assignment_memory[text]
            assigned_categories.append(assigned_category)
            reasons.append(reason)
            key_actions.append(actions)
            entities_involved.append(entities)
            specific_processes.append(process)
            account_opening_flags.append("Yes" if "Account Opening" in assigned_category else "No")
            repetition_labels.append("Repetitive")
        else:
            # Create prompt and generate response
            prompt = updated_prompt_template.format(input_text=text)
            response = generation_pipeline(prompt, max_new_tokens=200, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)
            
            # Extract the generated text
            generated_text = response[0]['generated_text'] if response else "No valid response"
            
            # Extract the category, reason, key actions, entities, and process
            category, reason, actions, entities, process = extract_detailed_information(generated_text)
            
            assigned_categories.append(category)
            reasons.append(reason)
            key_actions.append(actions)
            entities_involved.append(entities)
            specific_processes.append(process)
            repetition_labels.append("Unique")
            
            # Store the result for future reuse
            assignment_memory[text] = (category, reason, actions, entities, process)
            
            # Set the "Account Opening" flag
            account_opening_flags.append("Yes" if "Account Opening" in category else "No")
    
    # Add the classification results, repetition label, and flags to the DataFrame
    df_batch['assigned_category'] = assigned_categories
    df_batch['reason'] = reasons
    df_batch['key_actions'] = key_actions
    df_batch['entities_involved'] = entities_involved
    df_batch['specific_process'] = specific_processes
    df_batch['is_related_to_account_opening'] = account_opening_flags
    df_batch['repetition_label'] = repetition_labels
    
    return df_batch

# Extract category, reason, key actions, and entities involved from the generated text
def extract_detailed_information(text):
    lines = text.split("\n")
    category = "Not available"
    reason = "Not available"
    actions = "Not available"
    entities = "Not available"
    process = "Not available"

    for line in lines:
        line = line.strip()
        if line.startswith("1. Category:"):
            category = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
        elif line.startswith("2. Reason:"):
            reason = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
        elif line.startswith("3. Key Actions:"):
            actions = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
        elif line.startswith("4. Entities Involved:"):
            entities = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
        elif line.startswith("5. Specific Process:"):
            process = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
    
    return category, reason, actions, entities, process
