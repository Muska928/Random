import pandas as pd
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
from tqdm import tqdm
import time  # Importing time module for measuring time taken

# Load data
df = pd.read_excel('Data/closed_won_final.csv')  # Ensure this path is correct
df = df.head(100)  # Limiting to 100 rows for this demonstration
total_rows = len(df)

# Load model and tokenizer
model_path = "mistral/Mistral-7B-Instruct-v0.2"
tokenizer = AutoTokenizer.from_pretrained(
    model_path,
    trust_remote_code=True,
    padding_side="left",
    use_fast=True,
    add_bos_token=True,
    add_eos_token=True
)

tokenizer.pad_token = tokenizer.eos_token

# Model loading
model = AutoModelForCausalLM.from_pretrained(
    model_path,
    trust_remote_code=True,
    device_map="auto"
)

# Set up text generation pipeline
generation_pipeline = pipeline('text-generation', model=model, tokenizer=tokenizer)

# Dictionary to store assignments for reuse and track repetition
assignment_memory = {}

def classify_texts(df_batch):
    assigned_categories = []
    specific_processes = []
    account_opening_flags = []
    repetition_labels = []
    confidence_scores = []

    # Define the updated prompt template for hierarchical classification and location-specific context with confidence
    updated_prompt_template = """
    You are an AI tasked with reading a text related to financial and business processes. Follow the steps below to classify the text into one of the high-level categories, then assign a specific sub-category and describe the process:

    ### High-Level Categories:
    1. **Account Management**: Includes both new account creation and existing account operations.
        - **New Account Management**: For cases involving new accounts (e.g., New Account, DDA, Location-Specific Accounts).
        - **Existing Account Operations**: For cases involving already opened accounts (e.g., modifications, updates).
        
    2. **Client & Customer Services**: Includes client onboarding, customer support, and client account services.
        - **Client Onboarding**: New clients entering the system.
        - **Customer Support**: Issues, relationship management, etc.
        - **Client Account Management**: Existing client account changes.

    3. **Business Operations**: Includes partnerships, market disruptions, mergers, and personnel management.
        - **Business Partnership & Mergers**: Mergers, acquisitions, expansions, strategic partnerships.
        - **Personnel Management**: Onboarding, offboarding, employee transitions.
        - **Market Disruption & PEO**: Market-related changes, PEO operations.

    4. **Transaction Processing & Financial Management**: Includes revenue collection, transaction reviews, and service implementation.
        - **Revenue & Collections**: Payment processing, revenue collections.
        - **Transaction Reviews & Transfers**: ACH reviews, transfers, etc.
        - **Financial Services Implementation**: For new financial services, operational service setups.

    5. **Compliance & Regulatory Management**: Includes compliance adherence and regulatory changes.
        - **Compliance Management**: For adherence to regulations, account-level audits, and legal compliance.
        - **Regulatory Changes**: Legal updates, changes to processes to meet regulatory demands.

    6. **Uncategorized**: If none of the above categories apply.

    ### Response Format:
    1. High-Level Category: [Assigned High-Level Category or "Uncategorized"]
    2. Sub-Category: [Assigned Sub-Category or "Uncategorized"]
    3. Location/Geography: [Location (if applicable) or "Not available"]
    4. Specific Process: [2-3 word process description]
    5. Confidence: [Confidence level (0-100%)]

    Text: "{input_text}"
    """

    batch_texts = df_batch["combined_text"].tolist()

    for text in batch_texts:
        # Check if the text has been previously classified
        if text in assignment_memory:
            assigned_category, specific_process, confidence = assignment_memory[text]
            assigned_categories.append(assigned_category)
            specific_processes.append(specific_process)
            confidence_scores.append(confidence)
            account_opening_flags.append("Yes" if "Account Opening" in assigned_category else "No")
            repetition_labels.append("Repetitive")
        else:
            # Create prompt and generate response
            prompt = updated_prompt_template.format(input_text=text)
            response = generation_pipeline(prompt, max_new_tokens=200, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)
            
            # Extract the generated text
            generated_text = response[0]['generated_text'] if response else "No valid response"
            
            # Extract the high-level category, sub-category, process, location, and confidence score
            high_level_category, sub_category, location, process, confidence = extract_hierarchical_classification(generated_text)
            
            # Combine the high-level and sub-categories for storage
            full_category = f"{high_level_category} - {sub_category}"
            assigned_categories.append(full_category)
            specific_processes.append(process)
            confidence_scores.append(confidence)
            repetition_labels.append("Unique")
            
            # Store the result for future reuse
            assignment_memory[text] = (full_category, process, confidence)
            
            # Set the "Account Opening" flag
            account_opening_flags.append("Yes" if "Account Opening" in full_category else "No")
    
    # Add the classification results, repetition label, confidence score, and flags to the DataFrame
    df_batch['assigned_category'] = assigned_categories
    df_batch['specific_process'] = specific_processes
    df_batch['confidence_score'] = confidence_scores
    df_batch['is_related_to_account_opening'] = account_opening_flags
    df_batch['repetition_label'] = repetition_labels
    
    return df_batch

# Extract the high-level category, sub-category, specific process, and confidence score from the generated text
def extract_hierarchical_classification(text):
    # Split the text into lines
    lines = text.split("\n")
    high_level_category = "Not available"
    sub_category = "Not available"
    location = "Not available"
    process = "Not available"
    confidence = "Not available"

    # Loop through the lines to find the high-level category, sub-category, process, and confidence
    for line in lines:
        line = line.strip()
        if line.startswith("1. High-Level Category:"):
            high_level_category = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
        elif line.startswith("2. Sub-Category:"):
            sub_category = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
        elif line.startswith("3. Location/Geography:"):
            location = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
        elif line.startswith("4. Specific Process:"):
            process = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
        elif line.startswith("5. Confidence:"):
            confidence = line.split(": ", 1)[1].strip() if ": " in line else "Not available"
    
    return high_level_category, sub_category, location, process, confidence

# Main function to process batches
def process_batches(df, batch_size):
    all_results = pd.DataFrame()

    # Measure the start time
    start_time = time.time()

    for start in tqdm(range(0, total_rows, batch_size), desc="Processing Batches"):
        end = min(start + batch_size, total_rows)
        
        # Get the batch to process
        df_batch = df.iloc[start:end].copy()
        
        # Run classification task
        df_batch = classify_texts(df_batch)
        
        # Append the classified results to the full dataframe
        all_results = pd.concat([all_results, df_batch], ignore_index=True)

    # Measure the end time
    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Time taken to process {len(df)} records: {elapsed_time:.2f} seconds")

    # Save final combined results to new file after all batches are processed
    all_results.to_csv('final_classification_output_with_confidence.csv', index=False)
    print("Final results saved to final_classification_output_with_confidence.csv.")

# Run the process with batch size
process_batches(df, batch_size=10)

# Check the final DataFrame content
df_final = pd.read_csv('final_classification_output_with_confidence.csv')
print(df_final.head())
