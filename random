# ===== Quantile bins on score_raw_weighted + PLI counts + plot =====
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# how many quantile buckets? (change to 5 if you want quintiles)
n_bins = 4

# build quantile bins on the raw weighted score
# labels 1..n_bins (1 = lowest score, n_bins = highest)
q_labels = list(range(1, n_bins + 1))
df["score_quantile_bin"], bin_edges = pd.qcut(
    df["score_raw_weighted"],
    q=n_bins,
    labels=q_labels,
    retbins=True,
    duplicates="drop"
)

# ensure integer dtype for convenience
df["score_quantile_bin"] = df["score_quantile_bin"].astype(int)

# count PLIs in each bin (unique PLIs if a 'pli' column exists; else row counts)
if "pli" in df.columns:
    pli_counts = (
        df.groupby("score_quantile_bin")["pli"]
          .nunique()
          .reindex(q_labels, fill_value=0)
    )
else:
    pli_counts = (
        df["score_quantile_bin"].value_counts()
          .sort_index()
          .reindex(q_labels, fill_value=0)
    )

# print bin ranges + counts
print("\nQuantile bins on score_raw_weighted:")
for i in range(len(bin_edges) - 1):
    lo, hi = bin_edges[i], bin_edges[i+1]
    print(f"  Bin {i+1}: {lo:.2f}  to  {hi:.2f}  |  PLI count: {int(pli_counts.iloc[i])}")

# plot counts per quantile bin
plt.figure(figsize=(6,4))
bars = plt.bar(pli_counts.index.astype(int), pli_counts.values.astype(int))
plt.title("PLIs per Quantile Bin of score_raw_weighted")
plt.xlabel("Quantile bin (1 = lowest score, {} = highest)".format(n_bins))
plt.ylabel("PLI count")

# add value labels on bars
max_h = pli_counts.values.max() if len(pli_counts) else 0
for b in bars:
    h = b.get_height()
    plt.text(b.get_x() + b.get_width()/2, h + max(1, max_h)*0.02, f"{int(h)}",
             ha="center", va="bottom", fontsize=9)

plt.tight_layout()
plt.show()

