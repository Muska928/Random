import pandas as pd
import re
from transformers import AutoModelForSequenceClassification, AutoTokenizer, pipeline
from tqdm import tqdm

# Load data from Salesforce analytics
df_salesforce = pd.read_excel('/mnt/data/Salesforce_Deals_Text_Analytics.xlsx')

# Concatenate text columns into a single string variable
df_salesforce['combined_text'] = df_salesforce[
    ['record_comment_text', 'description_text', 'executive_summary_text', 'win_loss_reason_text', 'win_loss_comments_text']
].apply(lambda x: ' '.join(x.dropna()), axis=1)

# Preprocess the text
def preprocess_text(text):
    text = text.lower()  # Convert text to lowercase
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove special characters and numbers
    text = re.sub(r'\s+', ' ', text).strip()  # Remove extra whitespace
    return text

# Apply preprocessing
df_salesforce['combined_text'] = df_salesforce['combined_text'].apply(preprocess_text)

# Sample 1000 records
df_sample = df_salesforce.sample(n=1000, random_state=42)  # random_state for reproducibility

# Load Mistral model and tokenizer from the specified folder with device_map='auto'
model_path = "./mistral"
tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModelForSequenceClassification.from_pretrained(model_path, device_map='auto')

# Sentiment analysis pipeline with return_all_scores=True
sentiment_pipeline = pipeline('sentiment-analysis', model=model, tokenizer=tokenizer, return_all_scores=True)

# Define one-shot prompt template
one_shot_template = """
You are an information detector for a Fintech. Be as truthful as possible and try to generate the response quickly. Your job is to detect the Line of Business (LOB), inherent sentiment, and content retrieval.

- LOB: Includes line of business affected by the deal won or lost. It can be keywords around the following: Middle Office, HQ, service, onboarding, relationship. If LOB information isn't available mark the case as LOB: Not available.
- Sentiment: It would highlight the inherent sentiment within the transaction.
- Content Retrieval: Summarize the content in a maximum of 5 words which you find most suitable for the scenario.

Do not repeat messages already being provided to you, as these are unnecessary information for the user.

Examples:

Text: "The client was very satisfied with the onboarding process and the service provided."
Sentiment: POSITIVE
LOB: Middle Office
Content Retrieval: satisfied with onboarding

Text: "There were several issues with the service which led to dissatisfaction."
Sentiment: NEGATIVE
LOB: service
Content Retrieval: issues with service

Text: "The integration was smooth and the client appreciated the prompt support."
Sentiment: POSITIVE
LOB: IT Services
Content Retrieval: appreciated prompt support

Text: "The client was unhappy with the delays and lack of communication."
Sentiment: NEGATIVE
LOB: communication
Content Retrieval: unhappy with delays

Text: "The deal was cancelled due to budget constraints."
Sentiment: CANCELLED
LOB: Finance
Content Retrieval: budget constraints

Text: "The client cancelled the contract because of changes in their strategy."
Sentiment: CANCELLED
LOB: Strategy
Content Retrieval: changes in strategy

Text: "{text}"
Sentiment:
LOB:
Content Retrieval:
"""

# Apply the sentiment analysis and middle office classification using one-shot prompting
print("Applying one-shot prompting...")
sentiments = []
lobs = []
content_retrievals = []

for text in tqdm(df_sample['combined_text']):
    prompt = one_shot_template.format(text=text)
    response = sentiment_pipeline(prompt)

    # Ensure the response has scores and extract the sentiment with highest score
    if response:
        # Extract the highest score sentiment
        sentiment = max(response[0], key=lambda x: x['score'])
        sentiment_label = sentiment['label']
        
        # Extract LOB and content retrieval from the response text
        generated_text = response[0]['generated_text'] if 'generated_text' in response[0] else ""
        lob_match = re.search(r'LOB:\s*(.*)', generated_text)
        content_retrieval_match = re.search(r'Content Retrieval:\s*(.*)', generated_text)

        lob = lob_match.group(1) if lob_match else "Not available"
        content_retrieval = content_retrieval_match.group(1) if content_retrieval_match else "Not available"

        sentiments.append(sentiment_label)
        lobs.append(lob)
        content_retrievals.append(content_retrieval)
    else:
        # Handle cases where extraction fails
        sentiments.append(None)
        lobs.append("Not available")
        content_retrievals.append("Not available")

df_sample['sentiment'] = sentiments
df_sample['lob'] = lobs
df_sample['content_retrieval'] = content_retrievals

# Save the output to a CSV file
output_file_path = '/mnt/data/Salesforce_Deals_Sentiment_Analysis_Sample_Output.csv'
df_sample.to_csv(output_file_path, index=False)

# Print a sample of the output in tabular form
print(df_sample[['combined_text', 'sentiment', 'lob', 'content_retrieval']].head().to_markdown())
