# Step 2: Jaccard Similarity Evaluation (Updated)
# This evaluates similarity between topic clusters using Jaccard similarity
from sklearn.metrics import jaccard_score

def jaccard_similarity_score(corpus, lda_model, num_topics):
    topic_distributions = np.array([dict(lda_model[doc]) for doc in corpus])
    
    # Ensure the distribution is two-dimensional
    if topic_distributions.ndim == 1:
        topic_distributions = np.expand_dims(topic_distributions, axis=0)
    
    topic_assignments = np.argmax(topic_distributions, axis=1)
    
    binary_topic_matrix = np.eye(num_topics)[topic_assignments]

    jaccard_similarities = []
    for i in range(num_topics):
        for j in range(i + 1, num_topics):
            sim = jaccard_score(binary_topic_matrix[:, i], binary_topic_matrix[:, j], average='binary')
            jaccard_similarities.append((i, j, sim))

    return jaccard_similarities

# Run Jaccard Similarity Evaluation
num_topics = optimal_model.num_topics
jaccard_similarities = jaccard_similarity_score(corpus, optimal_model, num_topics)

# Display Jaccard Similarity between topic clusters
for topic1, topic2, sim in jaccard_similarities:
    print(f"Jaccard Similarity between Topic {topic1} and Topic {topic2}: {sim}")
