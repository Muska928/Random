import pandas as pd
import time
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
from tqdm import tqdm
import torch
from transformers import BitsAndBytesConfig

# Function to truncate text to a maximum of 4096 tokens
def truncate_to_4096_tokens(text):
    if isinstance(text, str):  # Ensure that text is a string
        tokens = text.split()
        if len(tokens) > 4096:
            tokens = tokens[:4096]
        return ' '.join(tokens)
    else:
        return ''  # Return an empty string or handle the NaN case appropriately

# Define the function to extract information from the generated text
def extract_information(text):
    lines = text.split("\n")
    topic_alignment = "Not available"
    category = "Not available"
    explanation = "Not available"
    
    for line in lines:
        if line.startswith("Topic Alignment:"):
            topic_alignment = line.split(": ")[1]
        elif line.startswith("Category:"):
            category = line.split(": ")[1]
        elif line.startswith("Explanation:"):
            explanation = line.split(": ")[1]
    
    return topic_alignment, category, explanation

# Load Mistral model and tokenizer
model_path = "mistral/Mistral-7B-Instruct-v0.2"
tokenizer = AutoTokenizer.from_pretrained(
    model_path,
    trust_remote_code=True,
    padding_side="left",
    use_fast=True,
    add_bos_token=True,
    add_eos_token=True
)
tokenizer.pad_token = tokenizer.eos_token

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=torch.bfloat16
)

model = AutoModelForCausalLM.from_pretrained(
    model_path,
    quantization_config=bnb_config,
    torch_dtype=torch.bfloat16,
    device_map="auto",  # Automatically map to available devices
    trust_remote_code=True,
)

model.config.use_cache = False
model.config.pretraining_tp = 1
model.gradient_checkpointing_enable()

generation_pipeline = pipeline('text-generation', model=model, tokenizer=tokenizer, device=0)

# Function to process each chunk
def process_chunk(df_chunk, batch_size=64):
    results = []
    
    for i in tqdm(range(0, len(df_chunk), batch_size), desc="Processing chunk"):
        batch_texts = df_chunk['combined_text'].iloc[i:i+batch_size].tolist()
        assigned_topics = df_chunk['assigned_topic_name'].iloc[i:i+batch_size].tolist()
        
        # Combine the assigned topic and text into the prompt
        prompts = [updated_prompt_template.format(topic_name=topic, input_text=text) for topic, text in zip(assigned_topics, batch_texts)]
        
        # Process batches asynchronously
        batch_responses = generation_pipeline(prompts, max_new_tokens=50, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)
        
        # Extract generated text from batch_responses
        for response in batch_responses:
            if isinstance(response, list) and len(response) > 0 and 'generated_text' in response[0]:
                generated_text = response[0]['generated_text']
            elif 'generated_text' in response:
                generated_text = response['generated_text']
            else:
                generated_text = "No valid response"
            results.append(generated_text)
    
    # Combine results with chunk
    df_chunk['final_response'] = results
    df_chunk[['topic_alignment', 'category', 'explanation']] = df_chunk['final_response'].apply(lambda x: pd.Series(extract_information(x)))
    
    # Save the processed chunk to a CSV file
    df_chunk.to_csv('LLM_Won_Analysis_Output_Chunked.csv', mode='a', index=False, header=not bool(tqdm.n))

# Load the dataset in chunks
chunk_size = 1000  # Adjust based on memory capacity
df_iterator = pd.read_excel('Data/LLM_Won_Analysis.xlsx', chunksize=chunk_size)

# Process each chunk
for df_chunk in df_iterator:
    # Apply the truncation to the 'combined_text' column using .loc to avoid the warning
    df_chunk.loc[:, 'combined_text'] = df_chunk['combined_text'].apply(truncate_to_4096_tokens)
    
    # Process the chunk
    process_chunk(df_chunk)

print("Processing complete. Output saved to LLM_Won_Analysis_Output_Chunked.csv.")
