import pandas as pd
import re
from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline
from tqdm import tqdm
import torch


# Concatenate text columns into a single string variable
df_salesforce['combined_text'] = df_salesforce[
    ['record_comment_text', 'description_text', 'executive_summary_text', 'win_loss_reason_text', 'win_loss_comments_text']
].apply(lambda x: ' '.join(x.dropna()), axis=1)

# Preprocess the text
def preprocess_text(text):
    text = text.lower()  # Convert text to lowercase
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove special characters and numbers
    text = re.sub(r'\s+', ' ', text).strip()  # Remove extra whitespace
    return text

# Apply preprocessing
df_salesforce['combined_text'] = df_salesforce['combined_text'].apply(preprocess_text)

# Sample 1000 records
df_sample = df_salesforce.sample(n=1000, random_state=42)  # random_state for reproducibility

# Load Mistral model and tokenizer from the specified folder with device_map='auto'
model_path = "./mistral"
tokenizer = AutoTokenizer.from_pretrained(model_path)
model = AutoModelForCausalLM.from_pretrained(model_path)

# Check if GPU is available and set device accordingly
device = "cuda" if torch.cuda.is_available() else "cpu"
model.to(device)

# Sentiment analysis pipeline with the Mistral instruct model
generation_pipeline = pipeline('text-generation', model=model, tokenizer=tokenizer, device=device)

# Maximum length of input tokens
max_input_length = 200

# Batch processing size
batch_size = 10

# Generate the output
results = []
for i in tqdm(range(0, len(df_sample), batch_size), desc="Processing"):
    batch_texts = df_sample['combined_text'].iloc[i:i+batch_size].tolist()
    truncated_texts = [tokenizer.decode(tokenizer.encode(text, max_length=max_input_length, truncation=True), skip_special_tokens=True) for text in batch_texts]
    
    prompts = [one_shot_template.format(input_text=text) for text in truncated_texts]
    
    batch_responses = generation_pipeline(prompts, max_new_tokens=50, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)
    results.extend([response[0]['generated_text'] for response in batch_responses])

# Split the results into separate columns
df_sample['final_response'] = results
df_sample[['LOB', 'Sentiment', 'Content Retrieved']] = df_sample['final_response'].str.extract(
    r'LOB: (.*?)\nSentiment: (.*?)\nContent Retrieved: (.*)', expand=True
)

# Save the results to an Excel file
df_sample.to_excel('/mnt/data/Salesforce_Deals_Text_Analytics_Output.xlsx', index=False)
