# Function for Topic Alignment With LDA
def topic_alignment_lda(df_batch):
    results = []

    # Define the updated prompt template to check topic alignment with text context
    updated_prompt_template = """
    You are an AI tasked with verifying if the assigned topic name matches the context of the content provided.
    Assess whether the topic assigned is relevant and appropriate for the text.
    Given the following text, identify if the assigned topic name aligns with the content:
    
    Assigned Topic Name: {topic_name}
    Text: {input_text}
    
    Provide your response in the following format:
    Topic Alignment: (Yes/No)
    Explanation: [Brief explanation of why the topic does or does not match the content]
    """
    
    batch_texts = df_batch["combined_text"].tolist()
    assigned_topics = df_batch["main_topic_name"].tolist()
    
    prompts = [updated_prompt_template.format(topic_name=topic, input_text=text) for topic, text in zip(assigned_topics, batch_texts)]
    batch_responses = generation_pipeline(prompts, max_new_tokens=200, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id)
    
    for response in batch_responses:
        if isinstance(response, list) and len(response) > 0 and 'generated_text' in response[0]:
            generated_text = response[0]['generated_text']
        elif 'generated_text' in response:
            generated_text = response['generated_text']
        else:
            generated_text = "No valid response"
        results.append(generated_text)
    
    df_batch['final_response_topic_alignment'] = results

# Extract topic alignment and explanation
def extract_information_alignment(text):
    lines = text.split("\n")
    topic_alignment = "Not available"
    explanation = "Not available"

    for line in lines:
        if line.strip().startswith("Topic Alignment:"):
            parts = line.split(": ", 1)
            if len(parts) > 1:
                topic_alignment = parts[1].strip()
        elif line.strip().startswith("Explanation:"):
            parts = line.split(": ", 1)
            if len(parts) > 1:
                explanation = parts[1].strip()
    
    return topic_alignment, explanation

# Ensure the extracted information gets applied
df_batch[['topic_alignment', 'topic_explanation']] = df_batch['final_response_topic_alignment'].apply(lambda x: pd.Series(extract_information_alignment(x)))
